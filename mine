provider "aws" {
  region = "us-east-1"  # Change to your desired region
}

# IAM Role for Lambda Function
resource "aws_iam_role" "lambda_role" {
  name               = "logo-transformer-${var.suffix}-role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action    = "sts:AssumeRole"
        Effect    = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })

  permissions_boundary = var.permissions_boundary_arn
}

# IAM Policy for Lambda Function
resource "aws_iam_policy" "lambda_policy" {
  name        = "logo-transformer-${var.suffix}-policy"
  description = "Policy for logo transformer Lambda function"
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action   = [
          "s3:GetObject",
          "s3:PutObject",
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Effect   = "Allow"
        Resource = "*"
      }
    ]
  })
}

# Attach Policy to Role
resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {
  policy_arn = aws_iam_policy.lambda_policy.arn
  role       = aws_iam_role.lambda_role.name
}

# Source S3 Bucket
resource "aws_s3_bucket" "source_bucket" {
  bucket = "codescreen-logos-${var.suffix}"
  acl    = "private"
}

# Destination S3 Bucket
resource "aws_s3_bucket" "destination_bucket" {
  bucket = "${aws_s3_bucket.source_bucket.bucket}-resized"
  acl    = "private"
}

# Lambda Function
resource "aws_lambda_function" "logo_transformer" {
  function_name = "logo-transformer-${var.suffix}"
  role          = aws_iam_role.lambda_role.arn
  handler       = "index.handler"  # Adjust if necessary based on your code
  runtime       = "nodejs18.x"
  timeout       = 30

  s3_bucket     = aws_s3_bucket.source_bucket.bucket
  s3_key        = "logo-transformer-package.zip"  # Ensure this is uploaded to the S3 bucket

  environment = {
    DESTINATION_BUCKET = aws_s3_bucket.destination_bucket.bucket
  }
}

# S3 Bucket Notification to Trigger Lambda
resource "aws_s3_bucket_notification" "bucket_notification" {
  bucket = aws_s3_bucket.source_bucket.id

  lambda_function {
    lambda_function_arn = aws_lambda_function.logo_transformer.arn
    events              = ["s3:ObjectCreated:*"]
  }

  depends_on = [aws_lambda_function.logo_transformer]
}

# Outputs
output "source_bucket_name" {
  value = aws_s3_bucket.source_bucket.bucket
}

output "destination_bucket_name" {
  value = aws_s3_bucket.destination_bucket.bucket
}

output "lambda_function_name" {
  value = aws_lambda_function.logo_transformer.function_name
}
